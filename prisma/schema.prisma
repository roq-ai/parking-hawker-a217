generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  start_time       DateTime      @db.Timestamp(6)
  end_time         DateTime      @db.Timestamp(6)
  user_id          String        @db.Uuid
  parking_space_id String        @db.Uuid
  created_at       DateTime      @default(now()) @db.Timestamp(6)
  updated_at       DateTime      @default(now()) @db.Timestamp(6)
  parking_space    parking_space @relation(fields: [parking_space_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user             user          @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model business {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String   @db.VarChar(255)
  address        String   @db.VarChar(255)
  contact_number String   @db.VarChar(255)
  user_id        String   @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  user           user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model company {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description   String?         @db.VarChar(255)
  name          String          @db.VarChar(255)
  created_at    DateTime        @default(now()) @db.Timestamp(6)
  updated_at    DateTime        @default(now()) @db.Timestamp(6)
  user_id       String          @db.Uuid
  tenant_id     String          @db.VarChar(255)
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parking_space parking_space[]
}

model parking_space {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  location           String    @db.VarChar(255)
  size               Int
  availability_times String    @db.VarChar(255)
  restrictions       String?   @db.VarChar(255)
  company_id         String    @db.Uuid
  created_at         DateTime  @default(now()) @db.Timestamp(6)
  updated_at         DateTime  @default(now()) @db.Timestamp(6)
  booking            booking[]
  company            company   @relation(fields: [company_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  booking     booking[]
  business    business[]
  company     company[]
}
